@page "/login"
@using System.Timers;

<PageTitle>Login Page</PageTitle>

@if(state == State.EnterPhoneNumber){
    <div class="frame">
        <h2 class="mb-2 title"><span class="underline">Phone login</span></h2>
        <EditForm OnValidSubmit="HandleSendSmsAsync" Model="LoginPhone">
            <DataAnnotationsValidator />


            <div>
                <label for="phone">Phone</label>
                <div class="input-form">
                    @* <img src="icons/smartphone.png" alt="phone" /> *@
                    <div class="input-with-icon">
                        <InputNumber id="phone" disabled="@isButtonDisabled" @bind-Value="LoginPhone.Phone" class="input-has-icon" />
                        <label for="phone" class="input-icon">+47</label>
                    </div>
                    <div>
                        <div class="text-validation-error">
                            <ValidationMessage For="@(() => LoginPhone.Phone)" />
                        </div>
                    </div>
                </div>
            </div>





            <button type="submit" class="sign-in-up-button" disabled="@isButtonDisabled">
                @buttonText
            </button>

            <p class="text-small">Don't have an accound? <a href="/register">Register here</a></p>

        </EditForm>
    </div>
}

@if(state == State.VerifyPhoneNumber){
    <div class="frame">
        <h2 class="mb-2 title"><span class="underline">Phone login</span></h2>
        <EditForm OnValidSubmit="HandleSendSmsAsync" Model="LoginToken">
            <DataAnnotationsValidator />
            <div>
                <label for="phone">Phone</label>
                <div class="input-form">
                    @* <img src="icons/smartphone.png" alt="phone" /> *@
                    <div class="input-with-icon">
                        <button class="countdown" disabled="@true">Resend SMS</button>
                        <InputNumber id="phone" disabled="@isButtonDisabled" @bind-Value="LoginToken.Phone" class="input-has-icon" />
                        <label for="phone" class="input-icon">+47</label>
                    </div>
                    <div>
                        <div class="text-validation-error">
                            <ValidationMessage For="@(() => LoginToken.Phone)" />
                        </div>
                    </div>
                </div>
            </div>
            @if(!isButtonDisabled){
                <p class="sms-notify-message">SMS has been sent to your number, please enter the token your recieved to the input below</p>
            }
            <div class="token-input-form">
                <label for="token" style="padding-bottom:5px; font-weight:bold; text-align:center;">SMS Token</label>
                <div class="input-form">
                    @* <img src="icons/smartphone.png" alt="phone" /> *@
                    <InputText id="token" @bind-Value="LoginToken.Token"  style="text-align:center" />
                    <div>
                        <div class="text-validation-error">
                            <ValidationMessage For="@(() => LoginToken.Token)" />
                        </div>
                    </div>
                </div>
            </div>




            <div class="flex-buttons">
                <button @onclick="@(()=>ChangeStates(State.EnterPhoneNumber))" style="background-color:#f4a240;">
                    Back
                </button>
                <button type="submit" style="background-color: #4070f4;">
                    Verify & Login
                </button>

            </div>

            <p class="text-small">Don't have an accound? <a href="/register">Register here</a></p>

        </EditForm>
    </div>
}

@code {
    private readonly int countDownTimerForSms = 5;
    private readonly string SendSmsMessage = "Send SMS";
    private readonly string ResendSmsMessage = "Resend SMS";



    [Inject] public SmsService SmsService { get; set; }
    [Inject] public IJSRuntime JSRuntime { get; set; }

    State state = State.EnterPhoneNumber;
    private LoginPhoneDto LoginPhone = new();
    private LoginWithTokenDto LoginToken = new();
    private string FeedbackMessage = "";
    private string FeedbackClass = "";
    private string buttonText = "Send SMS";
    private string resendButtonText = "Resend SMS";
    private bool isButtonDisabled = false;
    private Timer timer;

    private int countdownSeconds; // Cooldown duration in seconds

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (false)
        {

            timer = new Timer(1000);
            timer.Elapsed += StartCooldown;

            var clientOutcome = await SmsService.GetUsersCachedDataAsync();

            if(clientOutcome.IsSuccessful){

                await JSRuntime.InvokeVoidAsync("console.log", $"{countdownSeconds}");
                timer.Start();
            }
            else{
                countdownSeconds = countDownTimerForSms;
                isButtonDisabled = false;
                await InvokeAsync(StateHasChanged);
            }
            await JSRuntime.InvokeVoidAsync("console.log", $"{isButtonDisabled}");




        }

    }

    private async Task HandleSendSmsAsync()
    {
        try
        {
            var result = await SmsService.SendSmsAsync(LoginPhone.Phone?.ToString());

            if(result.IsSuccessful)
            {
                state = State.VerifyPhoneNumber;
                LoginToken.Phone = LoginPhone.Phone;
            }

            if (result.IsSuccessful)
            {
                FeedbackMessage = "SMS sent successfully! Please check your phone.";
                FeedbackClass = "text-success";
                StartTimer();
            }
            else
            {
                FeedbackMessage = result.Message;
                FeedbackClass = "text-danger";
            }
        }
        catch (Exception ex)
        {
            FeedbackMessage = "An error occurred while sending the SMS. Please try again later.";
            FeedbackClass = "text-danger";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void ChangeStates(State state){
        this.state = state;
    }



    private async void StartCooldown(Object source, ElapsedEventArgs e)
    {

        if (countdownSeconds <= 0)
        {
            StopTimer();
        }else{
            buttonText = $"{countdownSeconds}s to resend SMS";
            countdownSeconds--;
        }

        await InvokeAsync(StateHasChanged);
    }


    private void StartTimer()
    {
        isButtonDisabled = true;
        timer.Start();
    }

    private void StopTimer()
    {
        countdownSeconds = countDownTimerForSms;
        buttonText = SendSmsMessage;
        isButtonDisabled = false;
        timer.Stop();
    }

    enum State{
        EnterPhoneNumber,
        VerifyPhoneNumber
    }

}
