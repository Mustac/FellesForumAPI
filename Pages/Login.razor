@page "/login"
@using System.Timers;

<PageTitle>Login Page</PageTitle>

@if(state == State.EnterPhoneNumber){
    <div class="frame">
        <h2 class="mb-2 title"><span class="underline">Phone login</span></h2>
        <EditForm OnValidSubmit="HandleSendSmsAsync" Model="LoginPhone">
            <DataAnnotationsValidator />
            @if (!userExists)
            {
                <p class="text-small sms-notify-message" style="margin:0; padding:5px; text-align:left;">You don't have an account. Please click Register here located on the bottom of the form</p>
            }
            <div>
                <label for="phone">Phone</label>
                <div class="input-form">
                    <div class="input-with-icon">
                        <InputNumber id="phone" disabled="@(!canSendSms)" @bind-Value="LoginPhone.Phone" class="input-has-icon" />
                        <label for="phone" class="input-icon">+47</label>
                    </div>
                    <div>
                        <div class="text-validation-error">
                            <ValidationMessage For="@(() => LoginPhone.Phone)" />
                        </div>
                    </div>
                </div>
            </div>

            @if (countdownSeconds<=0)
            {
                <button type="submit" class="sign-in-up-button">
                    @buttonText
                </button>
            }else{
                <button type="button" class="sign-in-up-button" disabled="true">
                    @buttonText
                </button>
            }

            <p class="text-small">Don't have an account? <a href="/register">Register here</a></p>


        </EditForm>
    </div>
}

@if(state == State.VerifyPhoneNumber){
    <div class="frame">
        <h2 class="mb-2 title"><span class="underline">Phone login</span></h2>
        <EditForm OnValidSubmit="HandleLoginTokenAsync" Model="LoginToken">
            <DataAnnotationsValidator />
            <div>
                <label for="phone">Phone</label>
                <div class="input-form">
                    @* <img src="icons/smartphone.png" alt="phone" /> *@
                    <div class="input-with-icon">
                        @if(canSendSms){
                            <button class="countdown" disabled="@false">@SendSmsMessage</button>
                        }else{
                            <button class="countdown-disabled" disabled="@true">@resendButtonText</button>
                        }
                        <InputNumber id="phone" disabled="true" @bind-Value="LoginToken.Phone" class="input-has-icon" />
                        <label for="phone" class="input-icon">+47</label>
                    </div>
                    <div>
                        <div class="text-validation-error">
                            <ValidationMessage For="@(() => LoginToken.Phone)" />
                        </div>
                    </div>
                </div>
            </div>
            @if (smsHasBeenSentMessage)
            {
                <p class="sms-notify-message">SMS has been sent to your number, please enter the token your recieved to the input below</p>
            }
            <div class="token-input-form">
                <label for="token" style="padding-bottom:5px; font-weight:bold; text-align:center;">SMS Token</label>
                <div class="input-form">
                    @* <img src="icons/smartphone.png" alt="phone" /> *@
                    <InputText id="token" @bind-Value="LoginToken.Token"  style="text-align:center" />
                    <div>
                        <div class="text-validation-error">
                            <ValidationMessage For="@(() => LoginToken.Token)" />
                        </div>
                    </div>
                </div>
            </div>




            <div class="flex-buttons">
                <button @onclick="@(()=>ChangeStates(State.EnterPhoneNumber))" style="background-color:#f4a240;">
                    Back
                </button>
                <button type="submit" style="background-color: #4070f4;">
                    Verify & Login
                </button>

            </div>

            <p class="text-small">Don't have an accound? <a href="/register">Register here</a></p>

        </EditForm>
    </div>
}

@code {
    private int countDownTimerForSms { get => SmsService.ResendSmsTime; }
    private readonly string SendSmsMessage = "Send SMS";
    private readonly string ResendSmsMessage = "Resend SMS";

    [Inject] public SmsService SmsService { get; set; }
    [Inject] public UserService UserService { get; set; }
    [Inject] public IJSRuntime JSRuntime { get; set; }

    State state = State.EnterPhoneNumber;
    private LoginPhoneDto LoginPhone = new();
    private LoginWithTokenDto LoginToken = new();
    private string buttonText = "Send SMS";
    private string resendButtonText = "Resend SMS";
    private bool canSendSms = true;
    private bool smsHasBeenSentMessage = false;
    private bool userExists = true;
    private Timer timer;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // setting up the timer
            timer = new Timer(1000);
            timer.Elapsed += TimerTick;

            // checking if there is cached user and if the user has sent sms recently
            var clientOutcome = await SmsService.GetResendingTimer();
            await JSRuntime.InvokeVoidAsync("console.log", $"{clientOutcome.IsSuccessful}");
            await JSRuntime.InvokeVoidAsync("console.log", $"{clientOutcome.Data}");


            if(!clientOutcome.IsSuccessful)
            {
                countdownSeconds = clientOutcome.Data;
                canSendSms = false;
                StartTimer(clientOutcome.Data);
                await InvokeAsync(StateHasChanged);
            }

            await JSRuntime.InvokeVoidAsync("console.log", $"{canSendSms}");
        }

    }

    private async Task HandleSendSmsAsync()
    {

        var userResponse = await UserService.GetUserAsync(LoginPhone.Phone.Value.ToString());

        if (!userResponse.IsSuccessful)
        {
            LoginPhone.Phone = null;
            userExists = false;
            return;
        }

        if(countdownSeconds<=0){
            var result = await SmsService.SendSmsAsync(LoginPhone.Phone?.ToString());

            if(result.IsSuccessful)
            {
                resendButtonText = $"{countDownTimerForSms}s to resend SMS";
                state = State.VerifyPhoneNumber;
                smsHasBeenSentMessage = true;
                LoginToken.Phone = LoginPhone.Phone;
                StartTimer(countDownTimerForSms);
            }
        }

    }

    private async Task HandleLoginTokenAsync(){
        var loginOutcome = await UserService.VerifyUserAsync(LoginToken);

        await JSRuntime.InvokeVoidAsync("console.log", loginOutcome.Message);

    }

    private void ChangeStates(State state){
        this.state = state;
    }



    private async void TimerTick(Object source, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"{countdownSeconds}");
        if (countdownSeconds <= 0)
        {
            StopTimer();
        }else{
            buttonText = $"{countdownSeconds}s to resend SMS";
            resendButtonText = $"{countdownSeconds}s to resend SMS";
            countdownSeconds--;
        }
        await InvokeAsync(StateHasChanged);
    }


    private int countdownSeconds = 0;
    private void StartTimer(int secondsCooldown)
    {
        countdownSeconds = secondsCooldown;
        canSendSms = false;
        timer.Start();
    }

    private void StopTimer()
    {
        buttonText = SendSmsMessage;
        canSendSms = true;
        timer.Stop();
    }

    enum State{
        EnterPhoneNumber,
        VerifyPhoneNumber
    }

}
